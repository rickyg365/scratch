{"message":"use of deprecated `try` macro","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":383,"byte_end":447,"line_start":19,"line_end":19,"column_start":5,"column_end":69,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"__doc__\", \"This module is implemented in Rust\"));","highlight_start":5,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use the `?` operator instead","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":383,"byte_end":388,"line_start":19,"line_end":19,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"__doc__\", \"This module is implemented in Rust\"));","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\lib.rs","byte_start":446,"byte_end":447,"line_start":19,"line_end":19,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"__doc__\", \"This module is implemented in Rust\"));","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":"?","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":383,"byte_end":383,"line_start":19,"line_end":19,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"__doc__\", \"This module is implemented in Rust\"));","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"r#","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated `try` macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    try!(m.add(py, \"__doc__\", \"This module is implemented in Rust\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9mtry!(\u001b[0m\u001b[0mm.add(py, \"__doc__\", \"This module is implemented in Rust\")\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    m.add(py, \"__doc__\", \"This module is implemented in Rust\")\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mr#\u001b[0m\u001b[0mtry!(m.add(py, \"__doc__\", \"This module is implemented in Rust\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"use of deprecated `try` macro","code":null,"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":453,"byte_end":523,"line_start":20,"line_end":20,"column_start":5,"column_end":75,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str))));","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use the `?` operator instead","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":453,"byte_end":458,"line_start":20,"line_end":20,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str))));","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\lib.rs","byte_start":522,"byte_end":523,"line_start":20,"line_end":20,"column_start":74,"column_end":75,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str))));","highlight_start":74,"highlight_end":75}],"label":null,"suggested_replacement":"?","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":453,"byte_end":453,"line_start":20,"line_end":20,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    try!(m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str))));","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"r#","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated `try` macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    try!(m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str))));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can use the `?` operator instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9mtry!(\u001b[0m\u001b[0mm.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str)))\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mr#\u001b[0m\u001b[0mtry!(m.add(py, \"count_doubles\", py_fn!(py, count_doubles(val: &str))));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
